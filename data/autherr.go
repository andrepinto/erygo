// Code generated by erygo
package autherr

import (
	"bytes"
	erygo "github.com/andrepinto/erygo"
	"text/template"
)

func ErrInvalidToken(params ...func(*erygo.Err)) *erygo.Err {
	err := &erygo.Err{
		Details: []string{"hello {{.env}}"},
		Info: erygo.Info{
			Kind:    1,
			Service: "auth",
		},
		Message:    "invalid token received",
		StatusHTTP: 400,
	}
	for _, param := range params {
		param(err)
	}
	for i, detail := range err.Details {
		det := renderTemplate(detail)
		err.Details[i] = det
	}
	return err
}

func ErrTokenNotOwnedBySender(params ...func(*erygo.Err)) *erygo.Err {
	err := &erygo.Err{
		Details: []string{},
		Info: erygo.Info{
			Kind:    2,
			Service: "auth",
		},
		Message:    "Can`t identify sender as token owner",
		StatusHTTP: 403,
	}
	for _, param := range params {
		param(err)
	}
	for i, detail := range err.Details {
		det := renderTemplate(detail)
		err.Details[i] = det
	}
	return err
}

func ErrTokenNotFound(params ...func(*erygo.Err)) *erygo.Err {
	err := &erygo.Err{
		Details: []string{},
		Info: erygo.Info{
			Kind:    3,
			Service: "auth",
		},
		Message:    "Token was not found in storage",
		StatusHTTP: 404,
	}
	for _, param := range params {
		param(err)
	}
	for i, detail := range err.Details {
		det := renderTemplate(detail)
		err.Details[i] = det
	}
	return err
}
func renderTemplate(templText string) string {
	buf := &bytes.Buffer{}
	templ, err := template.New("").Parse(templText)
	if err != nil {
		return err.Error()
	}
	err = templ.Execute(buf, map[string]string{
		"env":     "dev",
		"release": "$release",
	})
	if err != nil {
		return err.Error()
	}
	return buf.String()
}
