// Code generated by erygo
package errors

import (
	"bytes"
	erygo "github.com/andrepinto/erygo"
	"text/template"
)

// UserNotFoud error
func UserNotFoud(params ...func(*erygo.Err)) *erygo.Err {
	err := &erygo.Err{
		Details: []string{"hello {{.env}}"},
		Info: erygo.Info{
			Kind:    1,
			Service: "users",
		},
		Message:    "user not found",
		StatusHTTP: 404,
	}
	for _, param := range params {
		param(err)
	}
	for i, detail := range err.Details {
		det := renderTemplate(detail)
		err.Details[i] = det
	}
	return err
}

// InternalServerError error
func InternalServerError(params ...func(*erygo.Err)) *erygo.Err {
	err := &erygo.Err{
		Details: []string{"hello {{.env}}"},
		Info: erygo.Info{
			Kind:    2,
			Service: "users",
		},
		Message:    "internal server error",
		StatusHTTP: 500,
	}
	for _, param := range params {
		param(err)
	}
	for i, detail := range err.Details {
		det := renderTemplate(detail)
		err.Details[i] = det
	}
	return err
}

// UserCreatedWithSuccess response
func UserCreatedWithSuccess(params ...func(*erygo.Response)) *erygo.Response {
	resp := &erygo.Response{
		Details: []string{},
		Info: erygo.Info{
			Kind:    3,
			Service: "users",
		},
		Message:    "user created with success",
		StatusHTTP: 200,
		Success:    checkStatus(200),
	}
	for _, param := range params {
		param(resp)
	}
	for i, detail := range resp.Details {
		det := renderTemplate(detail)
		resp.Details[i] = det
	}
	return resp
}

func renderTemplate(templText string) string {
	buf := &bytes.Buffer{}
	templ, err := template.New("").Parse(templText)
	if err != nil {
		return err.Error()
	}
	err = templ.Execute(buf, map[string]string{
		"env":     "dev",
		"release": "v1.0.0",
	})
	if err != nil {
		return err.Error()
	}
	return buf.String()
}

func checkStatus(status int) bool {
	return status < 400
}
